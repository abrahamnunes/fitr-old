install.packages(c("ggplot2", "dplyr", "randomForest", "party", "MASS"))
load("C:/Users/Abraham/Dropbox/Developer/Research/substance_use_mining/dataprocessed2.RData")
View(data)
View(data)
names(data)
data$ANALWT_C = data$ANALWT_C/6 #for pooled data, weights must be divided by number of sets
#USE ONLY COMPLETE CASES OF DEPENDENT VARIABLES, AND ONLY THOSE IN ADULTS
data = data[complete.cases(data[, c("MHSUITHK", "MHSUIPLN", "MHSUITRY")]),]
data = filter(data, CATAG7 >= 4)
#CONVERT DEMOGRAPHIC VARIABLES TO FACTORS
data.m = data[, (names(data) %in% c(flags,
medVars,
otherVars, "MHSUITRY", "MHSUITHK", "MHSUIPLN", "VEREP", "VESTR"))]
#CREATE VARIABLE FOR THOSE WHO HAVE USED SUBSTANCES OTHER THAN HALLUCINOGENS OR MARIJUANA
data.m$IEMHFLAG = rowSums(data.m[, c("COCFLAG", "HERFLAG", "INHFLAG", "PSYFLAG2")])
data.m$IEMHFLAG[data.m$IEMHFLAG > 0] = 1
#CONVERT VARIABLES TO FACTORS
for (i in 1:ncol(data.m)) {
data.m[[i]] = factor(data.m[[i]])
}
#ADD ANALYSIS WEIGHTS
data.m$ANALWT_C = data$ANALWT_C
#COMPUTE NUMBER OF ILLNESSES
data.m$ILLNLIF = rowSums(data[, medVars])
#CREATE THE MODIFIED VARIABLES IREDUC_MOD, IRMARIT_MOD
data.m$IREDUC_MOD = 0
data.m$IREDUC_MOD[data.m$IREDUC2 == 11] = 1
data.m$IREDUC_MOD[data.m$IREDUC2 == 10] = 1
data.m$IRMARIT_MOD = 0
data.m$IRMARIT_MOD[data.m$IRMARIT == 2] = 1
data.m$IRMARIT_MOD[data.m$IRMARIT == 3] = 1
data.m$IRMARIT_MOD[data.m$IRMARIT == 4] = 1
data.m$IREDUC_MOD  = factor(data.m$IREDUC_MOD)
data.m$IRMARIT_MOD = factor(data.m$IRMARIT_MOD)
#specify the study design for survey package
des = svydesign(id = ~VEREP,
strata = ~VESTR,
data = data.m,
weights = ~ANALWT_C,
nest = TRUE)
load("C:/Users/Abraham/Dropbox/Developer/Research/substance_use_mining/dataprocessed2.RData")
medVars = c("ASMALIF",
"BRONCLIF",
"CIRRLIF",
"DIABLIF",
"HARTDLIF",
"HEPATLIF",
"HBPLIF",
"HIVLIF",
"LUNCALIF",
"PANCRLIF",
"PNEULIF",
"STDSLIF",
"SINUSLIF",
"SLPAPLIF",
"STROKLIF",
"TINNLIF",
"TUBRCLIF",
"ULCERLIF")
levels(data$METHDON2)
require(ggplot2)
require(caret)
require(epiR)
require(dplyr)
require(randomForest)
require(prettyR)
require(survey)
data = data[complete.cases(data[, c("MHSUITHK", "MHSUIPLN", "MHSUITRY")]),]
data = filter(data, CATAG7 >= 4)
data.m = data[, (names(data) %in% c(flags,
medVars,
otherVars, "MHSUITRY", "MHSUITHK", "MHSUIPLN", "VEREP", "VESTR"))]
flags = c("CIGFLAG",
"CGRFLAG",
"PIPFLAG",
"SMKFLAG",
"CHWFLAG",
"SNFFLAG",
"TOBFLAG",
"ALCFLAG",
"MRJFLAG",
"COCFLAG",
"CRKFLAG",
"HERFLAG",
"HALFLAG",
"LSDFLAG",
"PCPFLAG",
"ECSFLAG",
"INHFLAG",
"ANLFLAG",
"OXYFLAG",
"TRQFLAG",
"STMFLAG",
"MTHFLAG",
"SEDFLAG",
"PSYFLAG2",
"CDUFLAG",
"METHDON2",
"BENZOS",
"HYDCODOP",
"PROCODNP",
"OXYCODP2",
"SUMFLAG",
"IEMFLAG",
"MJOFLAG")
data.m = data[, (names(data) %in% c(flags,
medVars,
otherVars, "MHSUITRY", "MHSUITHK", "MHSUIPLN", "VEREP", "VESTR"))]
otherVars = c("CATAG7",
"IRSEX",
"IRMARIT",
"IREDUC2",
"INCOME",
"TXILALEV",
"DEPRSLIF",
"ANXDLIF",
"AGE2",
"NEWRACE2")
data.m = data[, (names(data) %in% c(flags,
medVars,
otherVars, "MHSUITRY", "MHSUITHK", "MHSUIPLN", "VEREP", "VESTR"))]
data.m$IEMHFLAG[data.m$IEMHFLAG > 0] = 1
#CONVERT VARIABLES TO FACTORS
for (i in 1:ncol(data.m)) {
data.m[[i]] = factor(data.m[[i]])
}
data.m$IREDUC_MOD = 0
data.m$IREDUC_MOD[data.m$IREDUC2 == 11] = 1
data.m$IREDUC_MOD[data.m$IREDUC2 == 10] = 1
data.m$IRMARIT_MOD = 0
data.m$IRMARIT_MOD[data.m$IRMARIT == 2] = 1
data.m$IRMARIT_MOD[data.m$IRMARIT == 3] = 1
data.m$IRMARIT_MOD[data.m$IRMARIT == 4] = 1
data.m$IREDUC_MOD  = factor(data.m$IREDUC_MOD)
data.m$IRMARIT_MOD = factor(data.m$IRMARIT_MOD)
View(data.m)
summary(data.m)
data.m2 = filter(data.m, !is.na(ULCERLIF))
summary(data.m2)
write.table(data.m2, file = 'datafordbn.csv', sep = ",")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
'numeric',
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
setwd('C:/Users/Abraham/Documents/GitHub/edo-mbmf-rl/rlfit-toolkit')
data = read.csv('twostepdata.csv')
library(ggplot2)
library(dplyr)
View(data)
names(data) = c('id', 's1', 's2', 'a1', 'a2', 'r')
View(data)
data$transition_type = NA
data$transition_type(data$a1 == 1 && data$s2 == 2) = 'Common';
data$transition_type(data$a1 == 2 && data$s2 == 3) = 'Common';
data$transition_type(data$a1 == 1 && data$s2 == 3) = 'Rare';
data$transition_type(data$a1 == 2 && data$s2 == 2) = 'Rare';
data$transition_type = NA
data$transition_type[data$a1 == 1 && data$s2 == 2] = 'Common';
data$transition_type[data$a1 == 2 && data$s2 == 3] = 'Common';
data$transition_type[data$a1 == 1 && data$s2 == 3] = 'Rare';
data$transition_type[data$a1 == 2 && data$s2 == 2] = 'Rare';
View(data)
data$transition_type = NA
data$transition_type[data$a1 == 1 & data$s2 == 2] = 'Common';
data$transition_type[data$a1 == 2 & data$s2 == 3] = 'Common';
data$transition_type[data$a1 == 1 & data$s2 == 3] = 'Rare';
data$transition_type[data$a1 == 2 & data$s2 == 2] = 'Rare';
data$transition_type = NA
data$transition_type[data$a1 == 1 & data$s2 == 2] = 'Common';
data$transition_type[data$a1 == 2 & data$s2 == 3] = 'Common';
data$transition_type[data$a1 == 1 & data$s2 == 3] = 'Rare';
data$transition_type[data$a1 == 2 & data$s2 == 2] = 'Rare';
data$last_transition_type                         = NA;
data$last_transition_type[2:nrow(data)]           = data$last_transition_type[1:nrow(data)-1];
data$last_trial_rewarded                          = NA;
data$last_trial_rewarded[2:nrow(data)]            = data$r[1:nrow(data)-1]
data = data[2:nrow(data),]
View(data)
data        = read.csv('twostepdata.csv')
names(data) = c('id', 's1', 's2', 'a1', 'a2', 'r');
data$transition_type = NA
data$transition_type[data$a1 == 1 & data$s2 == 2] = 'Common';
data$transition_type[data$a1 == 2 & data$s2 == 3] = 'Common';
data$transition_type[data$a1 == 1 & data$s2 == 3] = 'Rare';
data$transition_type[data$a1 == 2 & data$s2 == 2] = 'Rare';
data$last_transition_type                         = NA;
data$last_transition_type[2:nrow(data)]           = data$transition_type[1:nrow(data)-1];
data$last_trial_rewarded                          = NA;
data$last_trial_rewarded[2:nrow(data)]            = data$r[1:nrow(data)-1]
data = data[2:nrow(data),]
View(data)
View(data)
data$last_transition_type                         = NA;
View(data)
source('~/GitHub/edo-mbmf-rl/rlfit-toolkit/analysis.R', echo=TRUE)
View(data)
source('~/GitHub/edo-mbmf-rl/rlfit-toolkit/analysis.R', echo=TRUE)
View(data)
ggplot(data, aes(x = trial, y = cumsum(r))) + geom_line(aes(colour = id))
ggplot(data, aes(x = trial, y = cumsum(r))) + geom_line(aes(colour = factor(id)))
ggplot(data, aes(x = trial, y = cumsum(r), group = factor(id))) + geom_line(aes(colour = id))
source('~/GitHub/edo-mbmf-rl/rlfit-toolkit/analysis.R', echo=TRUE)
ggplot(data, aes(x = trials, y = cumulative_reward)) + geom_path(aes(colour = factor(id)))
ggplot(data, aes(x = trial, y = cumulative_reward)) + geom_path(aes(colour = factor(id)))
source('~/GitHub/edo-mbmf-rl/rlfit-toolkit/analysis.R', echo=TRUE)
library(lme4)
lfit = glmer(stay_switch ~ last_transition_type*last_rewarded + (1|id), data = data, family = binomial(link = 'logit'))
lfit
summary(lfit)
names(lfit)
lfit2 = glm(stay_switch ~ last_transition_type*last_rewarded + (1|id), data = data, family = binomial(link = 'logit'))
lfit2
lfit2 = glm(stay_switch ~ last_transition_type*last_rewarded, data = data, family = binomial(link = 'logit'))
lfit2
summary(lfit2)
source('~/GitHub/edo-mbmf-rl/rlfit-toolkit/analysis.R', echo=TRUE)
lfit = glmer(stay_switch ~ last_transition_type*last_rewarded + (1|id), data = data, family = binomial(link = 'logit'))
summary(lfit)
ggplot(data, aes(x = trials, y = cumulative_reward)) + geom_path(aes(colour = factor(id)))
ggplot(data, aes(x = trial, y = cumulative_reward)) + geom_path(aes(colour = factor(id)))
d1 = filter(data, a1 == 1)
nrow(filter(d1, s2 == 2))
nrow(filter(d1, s2 == 2))/nrow(d1)
nrow(filter(d1, s2 == 3))/nrow(d1)
d1 = filter(data, a1 == 2)
nrow(filter(d1, s2 == 3))/nrow(d1)
